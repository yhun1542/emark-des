name: Deploy to Railway

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # Railway는 env의 RAILWAY_TOKEN을 자동 인식 (CLI v4.8.0 기준)
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      # 선택: 컨테이너 런타임 튜닝
      WORKERS: ${{ vars.WORKERS || 1 }}
      ENABLE_REAL_CALLS: ${{ vars.ENABLE_REAL_CALLS || 'false' }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || '' }}
      XAI_API_KEY: ${{ secrets.XAI_API_KEY || '' }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node (for Railway CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      # 선택: 단순 정적 검증 (필요시)
      - name: Show tree (debug)
        run: |
          ls -la
          echo "Dockerfile present?"; test -f Dockerfile && echo yes || (echo no && exit 1)
          echo "app/src/lib exists?"; test -d app/src/lib && echo yes || echo no
          echo "railway.toml"; test -f railway.toml && cat railway.toml || echo "(none)"

      # 핵심: env 인증으로 배포 (login 불필요)
      - name: Railway Up (env-auth)
        run: railway up --service emark-des

      # 선택: 헬스체크 (APP_URL을 GitHub Variables 또는 Secrets에 설정하면 동작)
      - name: Health check
        if: ${{ env.APP_URL != '' }}
        env:
          APP_URL: ${{ vars.APP_URL || secrets.APP_URL }}
        run: |
          echo "GET $APP_URL/health"
          curl -fsS "$APP_URL/health"
          echo -e "\nSSE sanity (5s)..."
          curl -N --max-time 5 "$APP_URL/api/stream?question=ping" | head -n 6 || true

